USE master

IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME='ATENTO')
	DROP DATABASE ATENTO
	
CREATE DATABASE ATENTO
GO

USE ATENTO

CREATE TABLE PAI
(
	COD_PAI INT IDENTITY, 
	NOME_PAI VARCHAR(50) NOT NULL, 
	
	CONSTRAINT PK_PAI 
		PRIMARY KEY (COD_PAI)
)

CREATE TABLE FILHO
(
	COD_FILHO INT IDENTITY, 
	NOME_FILHO VARCHAR(50) NOT NULL, 
	COD_PAI INT,
	
	CONSTRAINT PK_FILHO 
		PRIMARY KEY (COD_FILHO), 

	CONSTRAINT FK_FILHO_PAI 
		FOREIGN KEY (COD_PAI) 
		REFERENCES PAI
)

INSERT INTO PAI 
VALUES ('AGNALDO'), 
	('ZÉ'), 
	('TIÃO'), 
	('CHICO')
	
INSERT INTO FILHO
VALUES ('BRUNO', 1), 
	('NETINHO', 1), 
	('PEDRO', 1), 
	('ZEZINHO', 2), 
	('MARIA', NULL), 
	('TIANA', 3), 
	('MARIANA', NULL)
	
SELECT * 
FROM PAI

SELECT * 
FROM FILHO

--INNER JOIN - RETORNA DADOS QUE EXISTEM NAS DUAS TABELAS
SELECT * 
FROM PAI P -- P É UM ALIAS PARA PAI
/*INNER*/ JOIN FILHO F
	ON P.COD_PAI = F.COD_PAI

--CROSS JOIN - RETORNA UM PRODUTO CARTESIANO COM OS DADOS DAS TABELAS
SELECT *
FROM PAI
CROSS JOIN FILHO

--LEFT OUTER JOIN - RETORNA OS DADOS DA TABELA DA ESQUERDA E OS DADOS 
--					RELACIONADOS DA TABELA DA DIREITA
SELECT *
FROM PAI
LEFT /*OUTER*/ JOIN FILHO
	ON PAI.COD_PAI = FILHO.COD_PAI

--RIGHT OUTER JOIN - RETORNA OS DADOS DA TABELA DA DIREITA E OS DADOS 
--					 RELACIONADOS DA TABELA DA ESQUERDA
SELECT *
FROM PAI
RIGHT /*OUTER*/ JOIN FILHO
	ON PAI.COD_PAI = FILHO.COD_PAI

--FULL OUTER JOIN - RETORNA OS DADOS DA TABELA DA DIREITA E OS DADOS 
--					DA TABELA DA ESQUERDA
SELECT *
FROM PAI
FULL /*OUTER*/ JOIN FILHO
	ON PAI.COD_PAI = FILHO.COD_PAI

DROP TABLE FILHO 
DROP TABLE PAI

CREATE TABLE GENERO
(
	GENERO_CODIGO INT IDENTITY PRIMARY KEY, 
	GENERO_DESCRICAO VARCHAR(20) NOT NULL
)

CREATE TABLE ATOR
(
	ATOR_CODIGO INT IDENTITY PRIMARY KEY, 
	ATOR_NOME VARCHAR(50) NOT NULL
)

CREATE TABLE DIRETOR
(
	DIRETOR_CODIGO INT IDENTITY PRIMARY KEY,
	DIRETOR_NOME VARCHAR(50) NOT NULL
)

CREATE TABLE FILME
(
	FILME_CODIGO INT IDENTITY PRIMARY KEY, 
	FILME_NOME_ORIGINAL VARCHAR(50) NOT NULL,
	FILME_NOME_PT_BR VARCHAR(50) NULL,
	FILME_ANO SMALLINT
)

CREATE TABLE FILME_GENERO
(
	FILME_CODIGO INT REFERENCES FILME,
	GENERO_CODIGO INT REFERENCES GENERO,
	
	PRIMARY KEY(FILME_CODIGO, GENERO_CODIGO)
)

CREATE TABLE FILME_ATOR
(
	FILME_CODIGO INT REFERENCES FILME,
	ATOR_CODIGO INT REFERENCES ATOR,
	FILME_ATOR_PERSONAGEM VARCHAR(50) NULL,
	
	PRIMARY KEY(FILME_CODIGO, ATOR_CODIGO)
)

CREATE TABLE FILME_DIRETOR
(
	FILME_CODIGO INT REFERENCES FILME,
	DIRETOR_CODIGO INT REFERENCES DIRETOR,
	
	PRIMARY KEY(FILME_CODIGO, DIRETOR_CODIGO)
)

INSERT GENERO 
VALUES ('GUERRA'),
	('DRAMA'),
	('AVENTURA')
	
INSERT ATOR 
VALUES ('SYLVESTER STALONE'), 
	('CLINT EASTWOOD'), 
	('CHUCK NORRIS'), 
	('JET LI'), 
	('HILARY SWANK')

INSERT DIRETOR 
VALUES ('CLINT EASTWOOD'), 
	('SIMON WEST')

INSERT FILME 
VALUES('THE EXPENDABLES', 'OS MERCENÁRIOS', 2011), 
	('THE EXPENDABLES 2', 'OS MERCENÁRIOS 2', 2012), 
	('GRAN TORINO', 'GRAN TORINO', 2008), 
	('MILLION DOLLAR BABY', 'MENINA DE OURO', 2004)

INSERT FILME_GENERO
VALUES (1, 1), 
	(1, 3), 
	(2, 1), 
	(2, 3), 
	(3, 2), 
	(4, 2) 

INSERT FILME_DIRETOR
VALUES (1, 2), 
	(2, 2), 
	(3, 1), 
	(4, 1)

INSERT FILME_ATOR
VALUES (1, 1, 'BARNEY ROSS'), 
(1, 4, 'YIN YANG'), 
(2, 1, 'BARNEY ROSS'), 
(2, 3, 'BOOKER'), 
(2, 4, 'YIN YANG'), 
(3, 2, 'FRANKIE DUNN'), 
(3, 5, 'MAGGIE FITZGERALD')

--SELECIONAR FILME COM O SEU GENERO
--SELECT *
SELECT F.*, 
	G.GENERO_DESCRICAO
FROM FILME F
JOIN FILME_GENERO FG ON F.FILME_CODIGO = FG.FILME_CODIGO
JOIN GENERO G ON G.GENERO_CODIGO = FG.GENERO_CODIGO

SELECT F.*, 
	G.GENERO_DESCRICAO
FROM GENERO G 
JOIN FILME_GENERO FG ON G.GENERO_CODIGO = FG.GENERO_CODIGO
JOIN FILME F ON F.FILME_CODIGO = FG.FILME_CODIGO

SELECT F.*, 
	D.DIRETOR_NOME
FROM DIRETOR D 
JOIN FILME_DIRETOR FD ON D.DIRETOR_CODIGO = FD.DIRETOR_CODIGO
JOIN FILME F ON F.FILME_CODIGO = FD.FILME_CODIGO

SELECT F.*, 
	A.ATOR_NOME, 
	FA.FILME_ATOR_PERSONAGEM
FROM ATOR A 
JOIN FILME_ATOR FA ON A.ATOR_CODIGO = FA.ATOR_CODIGO
JOIN FILME F ON F.FILME_CODIGO = FA.FILME_CODIGO

SELECT FILME.*,
	ATOR.ATOR_NOME, 
	FILME_ATOR.FILME_ATOR_PERSONAGEM,
	DIRETOR.DIRETOR_NOME, 
	GENERO.GENERO_DESCRICAO
FROM FILME
JOIN FILME_GENERO 
	ON FILME.FILME_CODIGO = FILME_GENERO.FILME_CODIGO
JOIN FILME_ATOR 
	ON FILME.FILME_CODIGO = FILME_ATOR.FILME_CODIGO
JOIN FILME_DIRETOR 
	ON FILME.FILME_CODIGO = FILME_DIRETOR.FILME_CODIGO
JOIN GENERO	
	ON GENERO.GENERO_CODIGO = FILME_GENERO.GENERO_CODIGO
JOIN ATOR	
	ON ATOR.ATOR_CODIGO = FILME_ATOR.ATOR_CODIGO
JOIN DIRETOR	
	ON DIRETOR.DIRETOR_CODIGO = FILME_DIRETOR.DIRETOR_CODIGO
	

