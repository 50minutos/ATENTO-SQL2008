USE master

IF EXISTS(SELECT * FROM SYS.DATABASES WHERE NAME='ATENTO')
	DROP DATABASE ATENTO
	
CREATE DATABASE ATENTO
GO

USE ATENTO

CREATE TABLE GENERO
(
	GENERO_CODIGO INT IDENTITY PRIMARY KEY, 
	GENERO_DESCRICAO VARCHAR(20) NOT NULL
)

CREATE TABLE ATOR
(
	ATOR_CODIGO INT IDENTITY PRIMARY KEY, 
	ATOR_NOME VARCHAR(50) NOT NULL
)

CREATE TABLE DIRETOR
(
	DIRETOR_CODIGO INT IDENTITY PRIMARY KEY,
	DIRETOR_NOME VARCHAR(50) NOT NULL
)

CREATE TABLE FILME
(
	FILME_CODIGO INT IDENTITY PRIMARY KEY, 
	FILME_NOME_ORIGINAL VARCHAR(50) NOT NULL,
	FILME_NOME_PT_BR VARCHAR(50) NULL,
	FILME_ANO SMALLINT
)

CREATE TABLE FILME_GENERO
(
	FILME_CODIGO INT REFERENCES FILME,
	GENERO_CODIGO INT REFERENCES GENERO,
	
	PRIMARY KEY(FILME_CODIGO, GENERO_CODIGO)
)

CREATE TABLE FILME_ATOR
(
	FILME_CODIGO INT REFERENCES FILME,
	ATOR_CODIGO INT REFERENCES ATOR,
	FILME_ATOR_PERSONAGEM VARCHAR(50) NULL,
	
	PRIMARY KEY(FILME_CODIGO, ATOR_CODIGO)
)

CREATE TABLE FILME_DIRETOR
(
	FILME_CODIGO INT REFERENCES FILME,
	DIRETOR_CODIGO INT REFERENCES DIRETOR,
	
	PRIMARY KEY(FILME_CODIGO, DIRETOR_CODIGO)
)

INSERT GENERO 
VALUES ('GUERRA'),
	('DRAMA'),
	('AVENTURA')
	
INSERT ATOR 
VALUES ('SYLVESTER STALONE'), 
	('CLINT EASTWOOD'), 
	('CHUCK NORRIS'), 
	('JET LI'), 
	('HILARY SWANK')

INSERT DIRETOR 
VALUES ('CLINT EASTWOOD'), 
	('SIMON WEST')

INSERT FILME 
VALUES('THE EXPENDABLES', 'OS MERCENÁRIOS', 2011), 
	('THE EXPENDABLES 2', 'OS MERCENÁRIOS 2', 2012), 
	('GRAN TORINO', 'GRAN TORINO', 2008), 
	('MILLION DOLLAR BABY', 'MENINA DE OURO', 2004)

INSERT FILME_GENERO
VALUES (1, 1), 
	(1, 3), 
	(2, 1), 
	(2, 3), 
	(3, 2), 
	(4, 2) 

INSERT FILME_DIRETOR
VALUES (1, 2), 
	(2, 2), 
	(3, 1), 
	(4, 1)

INSERT FILME_ATOR
VALUES (1, 1, 'BARNEY ROSS'), 
(1, 4, 'YIN YANG'), 
(2, 1, 'BARNEY ROSS'), 
(2, 3, 'BOOKER'), 
(2, 4, 'YIN YANG'), 
(3, 2, 'FRANKIE DUNN'), 
(3, 5, 'MAGGIE FITZGERALD')

SELECT *
FROM FILME
WHERE FILME_ANO = 2012

SELECT *
FROM FILME 
WHERE FILME_ANO > 2010

SELECT *
FROM FILME
WHERE FILME_ANO >= 2010 
	AND FILME_ANO <= 2012
--EQUIVALENTE
SELECT *
FROM FILME
WHERE FILME_ANO BETWEEN 2010 AND 2012

SELECT *
FROM FILME 
WHERE FILME_ANO < 2010
	OR FILME_ANO > 2012
--EQUIVALENTE
SELECT *
FROM FILME
WHERE FILME_ANO NOT BETWEEN 2010 AND 2012

SELECT * 
FROM FILME 
WHERE FILME_CODIGO = 2
	OR FILME_CODIGO = 3
--EQUIVALENTE
SELECT *
FROM FILME 
WHERE FILME_CODIGO IN (2, 3)

SELECT * 
FROM FILME 
WHERE FILME_CODIGO <> 2
	AND FILME_CODIGO <> 3
--EQUIVALENTE
SELECT *
FROM FILME 
WHERE FILME_CODIGO NOT IN (2, 3)

UPDATE FILME
SET FILME_NOME_PT_BR = NULL
WHERE FILME_CODIGO = 4

SELECT *
FROM FILME

--ERRADO!!!
SELECT *
FROM FILME 
WHERE FILME_NOME_PT_BR <> NULL

--OPERAÇÃO COM NULL RETORNA NULL

DECLARE @X INT = 4
DECLARE @Y INT

SELECT @X, @Y, @X+@Y

DECLARE @S1 VARCHAR(10) = 'OPA...'
DECLARE @S2 VARCHAR(10) 

SELECT @S1,@S2, @S1+@S2

SELECT *
FROM FILME
WHERE FILME_NOME_PT_BR IS NULL 

SELECT *
FROM FILME
WHERE FILME_NOME_PT_BR IS NOT NULL 

SELECT *
FROM FILME
WHERE FILME_NOME_ORIGINAL = 'THE EXPENDABLES'

SELECT *
FROM FILME
WHERE FILME_NOME_ORIGINAL LIKE 'THE EXPENDABLES'

SELECT *
FROM FILME
WHERE FILME_NOME_ORIGINAL LIKE '%EXPENDABLES%'

SELECT *
FROM ATOR
WHERE ATOR_NOME LIKE 'S%'

SELECT *
FROM ATOR
WHERE ATOR_NOME LIKE '%I'

SELECT *
FROM ATOR
WHERE ATOR_NOME LIKE '%A%'

SELECT *
FROM ATOR
WHERE ATOR_NOME LIKE '%A%A%'

SELECT *
FROM ATOR 
WHERE ATOR_NOME LIKE '[CS]%'

--SELECT *
--FROM PRODUTO
--WHERE NOME_PRODUTO LIKE 'A[CÇ][UÚ]CAR'
----OU -> SÃO DIFERENTES
--SELECT *
--FROM PRODUTO
--WHERE NOME_PRODUTO LIKE 'A__CAR'

--CURINGA
--% -> QUALQUER QUANTIDADE DE CARACTERES DESCONHECIDOS
--_ -> EXATAMENTE UM CARACTERE DESCONHECIDO
--[...] -> ESCOLHE UM ELEMENTO DO CONJUNTO

CREATE TABLE PAI
(
	COD_PAI INT IDENTITY, 
	NOME_PAI VARCHAR(50) NOT NULL, 
	
	CONSTRAINT PK_PAI 
		PRIMARY KEY (COD_PAI)
)

CREATE TABLE FILHO
(
	COD_FILHO INT IDENTITY, 
	NOME_FILHO VARCHAR(50) NOT NULL, 
	COD_PAI INT,
	
	CONSTRAINT PK_FILHO 
		PRIMARY KEY (COD_FILHO), 

	CONSTRAINT FK_FILHO_PAI 
		FOREIGN KEY (COD_PAI) 
		REFERENCES PAI
)

INSERT INTO PAI 
VALUES ('AGNALDO'), 
	('ZÉ'), 
	('TIÃO'), 
	('CHICO')
	
INSERT INTO FILHO
VALUES ('BRUNO', 1), 
	('NETINHO', 1), 
	('PEDRO', 1), 
	('ZEZINHO', 2), 
	('MARIA', NULL), 
	('TIANA', 3), 
	('MARIANA', NULL)
	
--PAIS COM FILHOS
SELECT * 
FROM PAI P 
JOIN FILHO F ON P.COD_PAI = F.COD_PAI

--PAIS SEM FILHOS
SELECT P.* 
FROM PAI P 
LEFT JOIN FILHO F ON P.COD_PAI = F.COD_PAI
WHERE F.COD_FILHO IS NULL

--FILHOS COM PAIS
SELECT * 
FROM PAI P 
JOIN FILHO F ON P.COD_PAI = F.COD_PAI

--FILHOS SEM PAI
SELECT * 
FROM FILHO 
WHERE COD_PAI IS NULL

--FILHOS DO AGNALDO
SELECT * 
FROM PAI P 
JOIN FILHO F ON P.COD_PAI = F.COD_PAI
WHERE P.NOME_PAI = 'AGNALDO'

--FILHOS QUE NÃO SÃO DO AGNALDO
SELECT * 
FROM PAI P 
RIGHT JOIN FILHO F ON P.COD_PAI = F.COD_PAI
WHERE P.NOME_PAI != 'AGNALDO'
	OR F.COD_PAI IS NULL	

